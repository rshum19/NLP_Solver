function ThreeLinkDiver_Reduced3

%%%%%% Adding Custom Library
addpath('toolbox');
addpath('symbolic_function_diver')
addpath('../solution')
%%% System Parameters

data = load('threeLink_ornt_soln1.mat');

d = ThreeLinkDiver_Properties();
d.u = data.soln.grid;
l1=d.l1;
l2=d.l2;
l3=d.l3;
lc1 = d.lc1;
lc2 = d.lc2;
lc3 = d.lc3;
m1=d.m1;
m2=d.m2;
m3=d.m3;
I1=d.I1;
I2=d.I2;
I3=d.I3;

%%% Desired Configs

d.th2d = 90*(pi/180);
d.a1d = 20*(pi/180);
d.a3d = -30*(pi/180);
d.pd = 1 ;

%%% Initial Conditions

th20 = 0*(pi/180); % body angle
a10 = 40*(pi/180); % link1 angle
a30 = -10*(pi/180); % link3 angle
da10 = 0*(pi/180); % link1 anglular velocity
da30 = 0*(pi/180); % link3 anglular velocity

x0 = [th20;a10;a30;da10;da30];
dth20 = Ath_fun(I1,I2,I3,a10,a30,l1,l2,lc1,lc2,lc3,m1,m2,m3)*[da10;da30];

%%%%%%%%%%%%%%%%%%%%%% ODE %%%%%%%%%%%%%%%%%%%
options = odeset('RelTol',1e-9,'AbsTol',1e-12); 
[T,X]=ode45(@threeLink_dyn,[0 3],x0,options,d);
[Tc,Xc] = even_sample(T,X,720);


%%%%%%%%% For Animation and Plotting %%%%%%%%%%%

%  v = VideoWriter('videoRedux.avi');
%  open(v)

for i=1:size(Xc,1)
  theta2 = Xc(i,1);
  alpha1 = Xc(i,2);
  alpha3 = Xc(i,3);

ThreeLinkDiver_Draw(alpha1,theta2,alpha3,d)
drawnow


% frame=getframe;
% writeVideo(v,frame)
end

% close(v)

for i=1:length(X)
the2(i,1) = X(i,1);
alp1(i,1) = X(i,2);
alp3(i,1) = X(i,3);
dalp1(i,1) = X(i,4);
dalp3(i,1) = X(i,5);  

dthe(i,1) = Ath_fun(I1,I2,I3,alp1(i,1),alp3(i,1),l1,l2,lc1,lc2,lc3,m1,m2,m3)*[dalp1(i,1);dalp3(i,1)];
Js(:,:,i) = Js_fun(I1,I3,alp1(i,1),alp3(i,1),l1,lc1,lc3,m1,m3);
Fs(:,i) = Fs_fun(I1,I2,I3,alp1(i,1),alp3(i,1),dalp1(i,1),dalp3(i,1),l1,l2,lc1,lc2,lc3,m1,m2,m3);
[u,e1,e2,de1,de2,Lf2h,Lgh] = threeLink_con(the2(i,1),alp1(i,1),alp3(i,1),dthe(i,1),dalp1(i,1),dalp3(i,1),Js(:,:,i),Fs(:,i),eye(2),d);
Lgh_det(i) = det(Lgh);
Lf2h_theta(i) = Lf2h(1);
Lf2h_alpha(i) = Lf2h(2);
E(i,:) = [e1 e2]*(180/pi);
dE(i,:) = [de1 de2]*(180/pi);
U(i,:) = u';

end

Fs=Fs';


figure
plot(T, U)
title('Input v/s Time')
xlabel('time (s)')
ylabel('input (u)')
legend('u_{\theta}','u_{\alpha}')
axis('tight')

plot_results(t1,z1,u1,1);



the2=the2*(180/pi);
alp1=alp1*(180/pi);
alp3=alp3*(180/pi);

save('TLD_Red3.mat','the2','alp1','alp3','dthe','dalp1','dalp3','U','Js','Fs','Lgh_det','Lf2h_theta','Lf2h_alpha')

end


function [dx,u] = threeLink_dyn(t,x,d)


l1=d.l1;
l2=d.l2;
l3=d.l3;
lc1 = d.lc1;
lc2 = d.lc2;
lc3 = d.lc3;
m1=d.m1;
m2=d.m2;
m3=d.m3;
I1=d.I1;
I2=d.I2;
I3=d.I3;

th2 = x(1);
a1 = x(2);
a3 = x(3);
da1 = x(4);
da3 = x(5);


dth2=Ath_fun(I1,I2,I3,a1,a3,l1,l2,lc1,lc2,lc3,m1,m2,m3)*[da1;da3];
Js = Js_fun(I1,I3,a1,a3,l1,lc1,lc3,m1,m3);
Fs = Fs_fun(I1,I2,I3,a1,a3,da1,da3,l1,l2,lc1,lc2,lc3,m1,m2,m3);

dx(1) = Ath_fun(I1,I2,I3,a1,a3,l1,l2,lc1,lc2,lc3,m1,m2,m3)*[da1;da3];
dx(2) = da1;
dx(3) = da3;

B = eye(2);

%u = threeLink_con(th2,a1,a3,dth2,da1,da3,Js,Fs,B,d);
%out = Js\(-Fs + B*u);

u1 = interp1(d.soln.time,d.soln.control(1,:),t);
u2 = interp1(d.soln.time,d.soln.control(2,:),t);

dx(4) = u1;
dx(5) = u2;

dx = dx';

% y = [t x' u'];
% disp(y)
end

function [u,e1,e2,e1_dot,e2_dot,Lf2h,Lgh]=threeLink_con(th2,a1,a3,dth2,da1,da3,Js,Fs,B,d)


l1=d.l1;
l2=d.l2;
l3=d.l3;
lc1 = d.lc1;
lc2 = d.lc2;
lc3 = d.lc3;
m1=d.m1;
m2=d.m2;
m3=d.m3;
I1=d.I1;
I2=d.I2;
I3=d.I3;

%%%%%%%%%%%%%% Controlling only theta2 %%%%%%%%%%%%%

eps = 0.75;
kp = 40/eps^2;
kd = 40.1/eps;

%% Defining errors
err_alp1 = a1 - d.a1d;
err_alp3 = a3 - d.a3d;
err_the2 = th2 - d.th2d ;

%% Tuning parameters
a = [1;-1];
b = [-1;1];

%% Outputs 
e1 = a'*[err_the2;err_alp1];
e2 = b'*[err_the2;err_alp3];
e = [e1;e2]; %% error vector

e1_dot = a'*[dth2;da1];
e2_dot = b'*[dth2;da3];
e_dot = [e1_dot;e2_dot]; %% error velocity

v = -(kp*e + kd*e_dot);

Ath = Ath_fun(I1,I2,I3,a1,a3,l1,l2,lc1,lc2,lc3,m1,m2,m3);
AthDot = Ath_Dot_fun(I1,I2,I3,a1,a3,l1,l2,lc1,lc2,lc3,m1,m2,m3);
A1 = Ath(1) ; A2 = Ath(2);
f = Js\Fs; f1 = f(1); f2 = f(2);
g = Js\B;  g11 = g(1,1) ; g12 = g(1,2) ; g21 = g(2,1) ; g22 = g(2,2) ;


da = [da1;da3];

ft = da'*AthDot*da + A1*f1 + A2*f2;
g1t = A1*g11 + A2*g21 ;
g2t = A1*g12 + A2*g22 ; 

Lf2h(1,1) = a'*[ft;f1];
Lf2h(2,1) = b'*[ft;f2];

Lgh(1,1) = a'*[g1t;g11];
Lgh(1,2) = a'*[g2t;g12];
Lgh(2,1) = b'*[g1t;g21];
Lgh(2,2) = b'*[g2t;g22];

      

if abs(det(Lgh))<=0.05
    w = (g1t-g2t)\(-ft -kp*err_the2 - kd*(dth2)) ;
    u = [w;w];
else        
u = Lgh\(-Lf2h + v);
% u = [w;w]; 
end

maxT = [300;300]; %% max torque according to the human diver model
if norm(u)>norm(maxT)
    u = maxT;
end

% det(Lgh)
y = [Lf2h' det(Lgh) v'];
disp(y)

end



